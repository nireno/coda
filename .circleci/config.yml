# WARNING: config.yml file is generated from config.yml.jinja
---
version: 3
jobs:
    tracetool:
        docker:
            - image: codaprotocol/coda:toolchain-rust-e855336d087a679f76f2dd2bbdc3fdfea9303be3
        steps:
            - checkout
            - run:
                  name: Update submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Build trace-tool
                  command: cd src/app/trace-tool && cargo build --frozen

    build-wallet:
        macos:
            xcode: "10.2.0"
        steps:
            - checkout
            - run:
                  name: Update submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run: cd frontend/wallet && yarn
            - run:
                  name: Lint wallet
                  command: cd frontend/wallet && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build wallet
                  command: cd frontend/wallet && yarn run build-ci
            - run:
                  name: Test wallet
                  command: cd frontend/wallet && yarn test
            - run:
                  name: Build dist wallet
                  command: cd frontend/wallet && yarn run dist
            - run:
                  name: Publish dist wallet
                  command: (env HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli) && ./scripts/publish-wallet.sh
            - run: cd frontend/website && yarn install
            - run:
                  name: Decrypt PragmataPro font
                  command: cd frontend/website && yarn run decrypt-ci
            - run:
                  name: Lint website
                  command: cd frontend/website && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build website
                  command: cd frontend/website && (env HOMEBREW_NO_AUTO_UPDATE=1 brew install pandoc) && pip install mkdocs && yarn run build
            - run:
                  name: Deploy staging
                  command: cd frontend/website && (if [ "$CIRCLE_BRANCH" == "develop" ]; then yarn run deploy-ci; fi)
            - run: cd frontend/bot && yarn
            - run:
                  name: Lint bot
                  command: cd frontend/bot && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build bot
                  command: cd frontend/bot && yarn run build-ci

    build-archive:
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
              environment:
                CODA_DOCKER: true
                HASURA_PORT: 8080
            - image: postgres:12
              environment:
                POSTGRES_PASSWORD: codarules
                POSTGRES_USER: admin
                POSTGRES_DB: archiver
            - image: hasura/graphql-engine:v1.0.0-beta.6
              environment:
                HASURA_GRAPHQL_DATABASE_URL: postgres://admin:codarules@localhost:5432/archiver
                HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
                HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
        steps:
            - checkout
            - run:
                  name: Update Submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Build Archive Process
                  command:  bash -c 'eval `opam config env` && make build_archive'
            - run:
                  name: Configure Hasura
                  command: ls && ./scripts/archive/make_hasura_configurations.sh
    lint:
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Check circle CI configuration rendering
                  command: ./scripts/test.py render --check .circleci/config.yml.jinja .mergify.yml.jinja
            - run:
                  name: OCamlformat (make check-format)
                  command: eval `opam config env` && make check-format
            - run:
                  name: Snarky tracks master (make check-snarky-submodule)
                  command: make check-snarky-submodule
            - run:
                  name: Check CODEOWNERS file format
                  command: ./scripts/lint_codeowners.sh
            - run:
                  name: Require ppx_coda preprocessing for linting
                  command: ./scripts/require-ppx-coda.py
    lint-opt:
        docker:
            - image: codaprotocol/coda:toolchain-03e9ed5771ebca91003ce50fb246640f3d5ff061
        steps:
            - checkout
            - run:
                  name: Compare versioned types in PR
                  command: ./scripts/compare_pr_diff_types.sh
    update-branch-protection:
        docker:
            - image: python:3
        steps:
            - run:
                name: Install dependencies
                command: pip install --user requests jinja2
            - checkout
            - run:
                  name: Update branch protection rule from test configuration
                  command: ./scripts/test.py required-status >required_status && cat required_status && ./scripts/update_branch_rule.py required_status

    build-auxiliary:
        docker:
            - image: nixos/nix
        steps:
            - checkout
            - run:
                name: Install cachix
                command: nix-env -iA cachix -f https://cachix.org/api/v1/install
            - run:
                name: Build libp2p_helper using cachix
                command: |
                    cachix use codaprotocol
                    cd src/app/libp2p_helper
                    nix-build default.nix

    build-macos:
      # only run when there's a 'release' tag
      # filters:
      #   tags:
      #      only: /^release.*/
        macos:
            xcode: "10.2.1"
        resource_class: large
        working_directory: /Users/distiller/coda
        environment:
            HOMEBREW_LOGS: /Users/distiller/homebrew.log
            OPAMYES: 1
        steps:
            - run:
                name: Delete xcode simulators (Free 10GB - unused)
                command: |
                    sudo rm -rf /Library/Developer/CoreSimulator/Profiles/Runtimes/
                    df -h
            - checkout
            - run:
                  name: Update submodules
                  command: git submodule sync && git submodule update --init --recursive
            - restore_cache:
                name: Restore cache - homebrew
                keys:
                    - homebrew-v6-{{ checksum "scripts/macos-setup-brew.sh" }}
                    - homebrew-v5-
            - run:
                name: Install macos dependencies - homebrew - make macos-setup-download
                command: |
                    ./scripts/skip_if_only_frontend.sh make macos-setup-download
            - save_cache:
                name: Save cache - homebrew
                key: homebrew-v6-{{ checksum "scripts/macos-setup-brew.sh" }}
                paths:
                    - "/usr/local/Homebrew"
                    - "/Users/distiller/Library/Caches/Homebrew"

            - run:
                name: Create opam cache signature file
                command: |
                    cat scripts/macos-setup-opam.sh > opam_ci_cache.sig
                    cat src/opam.export >> opam_ci_cache.sig
            - restore_cache:
                name: Restore cache - opam
                keys:
                    - opam-v6-{{ checksum "opam_ci_cache.sig" }}
                    - opam-v5-{{ checksum "src/opam.export" }}
                    - opam-v4-{{ checksum "src/opam.export" }}
                    - opam-v3-{{ checksum "src/opam.export" }}
            - run:
                name: Ensure/Fix opam permisssions
                command: |
                    set +e
                    sudo mkdir -p /Users/distiller/.opam
                    sudo chown -R distiller /Users/distiller/.opam | true
                    sudo chmod -R u+w /Users/distiller/.opam | true
            - run:
                name: Install macos dependencies - opam -- make macos-setup-compile
                command: ./scripts/skip_if_only_frontend.sh make macos-setup-compile
            - save_cache:
                name: Save cache - opam
                key: opam-v6-{{ checksum "opam_ci_cache.sig" }}
                paths:
                    - "/Users/distiller/.opam"
                no_output_timeout: 1h
            - run:
                name: Install nix and cachix
                command: |
                    curl https://nixos.org/nix/install | sh
                    . ~/.nix-profile/etc/profile.d/nix.sh
                    nix-env -iA cachix -f https://cachix.org/api/v1/install
            - run:
                name: Build libp2p_helper using cachix
                command: |
                    . ~/.nix-profile/etc/profile.d/nix.sh
                    cachix use codaprotocol
                    cd src/app/libp2p_helper
                    nix-build default.nix
            - run:
                name: Build ocaml
                environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                command: |
                    bash -c 'eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log'
                no_output_timeout: 1h
                # We want the build to fail here if we generated PVkeys so no
                # rebuild after a regen causes the build to exit
            - run:
                name: Collect PV Keys
                command: |
                    mkdir -p package/keys
                    cp /tmp/s3_cache_dir/* package/keys/.
            - run:
                name: Collect and rewrite aux binaries (libp2p_helper + logproc)
                command: |
                    cp src/app/libp2p_helper/result/bin/libp2p_helper package/coda-libp2p_helper
                    chmod +w package/coda-libp2p_helper
                    ./scripts/librewrite-macos.sh package/coda-libp2p_helper
                    cp src/_build/default/app/logproc/logproc.exe package/coda-logproc
                    chmod +wx package/coda-logproc
            - run:
                name: Collect coda binary
                command: |
                    cp src/_build/default/app/cli/src/coda.exe package/coda
            - run:
                name: Build homebrew package
                command: |
                    tar czvf homebrew-coda.tar.gz package
                    openssl dgst -sha256 homebrew-coda.tar.gz > homebrew-coda.tar.gz.sha256
                    cp homebrew-coda.tar.gz* package/.
            - run:
                  name: Copy artifacts to cloud
                  bsckground: true
                  command: ./scripts/skip_if_only_frontend.sh scripts/artifacts.sh
            - store_artifacts:
                  path: package
    build-artifacts--testnet_postake_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Install Docker client
                  command: |
                      set -x
                      VER="19.03.4"
                      curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
                      tar -xz -C /tmp -f /tmp/docker-$VER.tgz
                      mv /tmp/docker/* /usr/bin
            - run:
                  name: Artifacts
                  command: |
                      mkdir -p /tmp/artifacts
                      touch /tmp/artifacts/coda_pvkeys_dummy
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Pin external packages
                  command: ./scripts/pin-external-packages.sh
            - run:
                  name: Install awscli
                  command: sudo pip install awscli
            - run:
                  name: Build OCaml
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'eval `opam config env` && make build 2>&1 | tee /tmp/artifacts/buildocaml.log'
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                  no_output_timeout: 20m
            - run:
                  name: Upload generated keys
                  command: |
                      ls -l /tmp/coda_cache_dir/
                      aws s3 sync --acl public-read /tmp/coda_cache_dir/ s3://snark-keys.o1test.net/
                      sleep 10
            - run:
                  name: Rebuild for pvkey changes
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'eval `opam config env` && make build 2>&1 | tee /tmp/artifacts/buildocaml2.log'
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                  no_output_timeout: 20m
            - run:
                  name: Build deb package with PV keys and PV key tar
                  command: ./scripts/skip_if_only_frontend.sh make deb
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                  no_output_timeout: 20m
            - run:
                  name: Store genesis public/private keypairs
                  command: ./scripts/skip_if_only_frontend.sh make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: ./scripts/skip_if_only_frontend.sh make publish_deb
                  no_output_timeout: 20m
            - run:
                  name: Copy artifacts to cloud
                  command: ./scripts/skip_if_only_frontend.sh scripts/artifacts.sh
<<<<<<< HEAD
=======
            - setup_remote_docker
            - run: 
                  name: Build and Upload Docker 
                  command: |
                    source /tmp/DOCKER_DEPLOY_ENV
                    echo "Publishing Docker"
                    echo "Should Publish Docker: $CODA_WAS_PUBLISHED"
                    set -x
                    if [[ "$CODA_WAS_PUBLISHED" = true  ]]; then
                        
                        echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
                        ./scripts/skip_if_only_frontend.sh scripts/release-docker.sh \
                        -s coda-daemon \
                        -v $CODA_GIT_TAG-$CODA_GIT_BRANCH-$CODA_GITHASH \
                        --extra-args "--build-arg coda_version=$CODA_DEB_VERSION --build-arg deb_repo=$CODA_DEB_REPO"
                    fi
            - persist_to_workspace:
                root: /tmp/artifacts
                paths: coda_pvkeys*
>>>>>>> f7577ff09... added a docker build step to coda build
            - store_artifacts:
                  path: /tmp/artifacts
    test-unit--test_postake_snarkless_unittest:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
          # Uncomment if you want to try debugging why this install breaks
          # some unit tests:
          # 1. The command_line_tests
          # 2. Kademlia tests
          #
             #I'm sorry for the mess, but somehow this actually works
             #Derived from: https://github.com/NixOS/nix/issues/971
            #- run:
                #name: Install nix and cachix
                #command: |
                     #Make a nix user
                    #sudo addgroup --system nixbld && sudo adduser --home /home/nix --disabled-password --gecos "" --shell /bin/bash nix && sudo adduser nix nixbld && sudo mkdir -m 0755 /nix && sudo chown nix /nix && sudo mkdir -p /etc/nix && sudo bash -c 'echo "sandbox = false" > /etc/nix/nix.conf'
                     #Install nix and cachix with that user
                    #sudo -H -u nix bash -c 'cd /home/nix && touch ~/.bash_profile && (curl https://nixos.org/nix/install | sh) && cd /home/nix && . ~/.nix-profile/etc/profile.d/nix.sh && nix-env -iA cachix -f https://cachix.org/api/v1/install'

            #- run:
                #name: Build libp2p_helper using cachix
                #command: |
                     #Make sure our nix user can write to libp2p_helper dir
                    #chmod -R 777 src/app/libp2p_helper
                     #Do the build
                    #sudo -H -u nix bash -c '. ~/.nix-profile/etc/profile.d/nix.sh && cachix use codaprotocol && cd src/app/libp2p_helper && nix-build default.nix'
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && dune build --profile=test_postake_snarkless_unittest -j8 && (dune runtest src/lib --profile=test_postake_snarkless_unittest -j8 || (./scripts/link-coredumps.sh && false))'
                  no_output_timeout: 30m
            - store_artifacts:
                path: core_dumps
    test-unit--dev:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
          # Uncomment if you want to try debugging why this install breaks
          # some unit tests:
          # 1. The command_line_tests
          # 2. Kademlia tests
          #
             #I'm sorry for the mess, but somehow this actually works
             #Derived from: https://github.com/NixOS/nix/issues/971
            #- run:
                #name: Install nix and cachix
                #command: |
                     #Make a nix user
                    #sudo addgroup --system nixbld && sudo adduser --home /home/nix --disabled-password --gecos "" --shell /bin/bash nix && sudo adduser nix nixbld && sudo mkdir -m 0755 /nix && sudo chown nix /nix && sudo mkdir -p /etc/nix && sudo bash -c 'echo "sandbox = false" > /etc/nix/nix.conf'
                     #Install nix and cachix with that user
                    #sudo -H -u nix bash -c 'cd /home/nix && touch ~/.bash_profile && (curl https://nixos.org/nix/install | sh) && cd /home/nix && . ~/.nix-profile/etc/profile.d/nix.sh && nix-env -iA cachix -f https://cachix.org/api/v1/install'

            #- run:
                #name: Build libp2p_helper using cachix
                #command: |
                     #Make sure our nix user can write to libp2p_helper dir
                    #chmod -R 777 src/app/libp2p_helper
                     #Do the build
                    #sudo -H -u nix bash -c '. ~/.nix-profile/etc/profile.d/nix.sh && cachix use codaprotocol && cd src/app/libp2p_helper && nix-build default.nix'
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && dune build --profile=dev -j8 && (dune runtest src/lib --profile=dev -j8 || (./scripts/link-coredumps.sh && false))'
                  no_output_timeout: 30m
            - store_artifacts:
                path: core_dumps
    test-unit--dev_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && dune build --profile=dev_medium_curves -j8 && (dune runtest src/lib --profile=dev_medium_curves -j8 || (./scripts/link-coredumps.sh && false))'
                  no_output_timeout: 1h
            - store_artifacts:
                path: core_dumps
    test--fake_hash:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- fake_hash:full-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "fake_hash:full-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake:full-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake:full-test"'
            - run:
                  name: Running test -- test_postake:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake:transaction-snark-profiler -k 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_bootstrap:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_bootstrap:coda-bootstrap-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_bootstrap:coda-bootstrap-test"'
            - run:
                  name: Running test -- test_postake_bootstrap:coda-long-fork -num-proposers 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_bootstrap:coda-long-fork -num-proposers 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_catchup:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_catchup:coda-restart-node-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_catchup:coda-restart-node-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_delegation:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_delegation:coda-delegation-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_delegation:coda-delegation-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_five_even_snarkless:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_five_even_snarkless:coda-shared-prefix-multiproposer-test -num-proposers 5
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_five_even_snarkless:coda-shared-prefix-multiproposer-test -num-proposers 5"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_five_even_txns:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_five_even_txns:coda-shared-prefix-multiproposer-test -num-proposers 5 -payments
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_five_even_txns:coda-shared-prefix-multiproposer-test -num-proposers 5 -payments"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_holy_grail:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_holy_grail:coda-restarts-and-txns-holy-grail -num-proposers 5
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_holy_grail:coda-restarts-and-txns-holy-grail -num-proposers 5"'
            - run:
                  name: Running test -- test_postake_holy_grail:coda-long-fork -num-proposers 5
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_holy_grail:coda-long-fork -num-proposers 5"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_snarkless:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_snarkless:full-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless:full-test"'
            - run:
                  name: Running test -- test_postake_snarkless:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless:transaction-snark-profiler -k 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_split:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_split:coda-shared-prefix-multiproposer-test -num-proposers 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split:coda-shared-prefix-multiproposer-test -num-proposers 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_split_snarkless:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-peers-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-peers-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-transitive-peers-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-transitive-peers-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-block-production-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-block-production-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-shared-prefix-test -who-proposes 0
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-shared-prefix-test -who-proposes 0"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-shared-prefix-test -who-proposes 1
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-shared-prefix-test -who-proposes 1"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-restart-node-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-restart-node-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-change-snark-worker-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-change-snark-worker-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-archive-node-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-archive-node-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_three_proposers:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_three_proposers:coda-txns-and-restart-non-proposers
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_three_proposers:coda-txns-and-restart-non-proposers"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_txns:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_txns:coda-shared-state-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_txns:coda-shared-state-test"'
            - run:
                  name: Running test -- test_postake_txns:coda-batch-payment-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_txns:coda-batch-payment-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_medium_curves:full-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_medium_curves:full-test"'
                  no_output_timeout: 20m
            - run:
                  name: Running test -- test_postake_medium_curves:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_medium_curves:transaction-snark-profiler -k 2"'
                  no_output_timeout: 20m
            - store_artifacts:
                  path: test_logs
    test--test_postake_snarkless_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_snarkless_medium_curves:full-test
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless_medium_curves:full-test"'
            - run:
                  name: Running test -- test_postake_snarkless_medium_curves:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless_medium_curves:transaction-snark-profiler -k 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_split_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-6cc080c12524db09ab6d62f6dd85e9248377eb98
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Running test -- test_postake_split_medium_curves:coda-shared-prefix-multiproposer-test -num-proposers 2
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_medium_curves:coda-shared-prefix-multiproposer-test -num-proposers 2"'
            - store_artifacts:
                  path: test_logs

workflows:
    version: 2
    coda_parallel:
        jobs:
            - lint
            - lint-opt
            - build-auxiliary
            - update-branch-protection:
                filters:
                  branches:
                    only: develop
            - tracetool
            - build-wallet
            - build-archive
            - build-macos
            - build-artifacts--testnet_postake_medium_curves
            - test-unit--test_postake_snarkless_unittest
            - test-unit--dev
            - test--fake_hash
            - test--test_postake
            - test--test_postake_bootstrap
            - test--test_postake_catchup
            - test--test_postake_delegation
            - test--test_postake_five_even_snarkless
            - test--test_postake_five_even_txns
            - test--test_postake_holy_grail
            - test--test_postake_snarkless
            - test--test_postake_split
            - test--test_postake_split_snarkless
            - test--test_postake_three_proposers
            - test--test_postake_txns

    daily:
        triggers:
          - schedule:
              cron: "0 12 * * *"
              filters:
                branches:
                  only:
                    - develop
                    - /release\/.*/
        jobs:
          - test-unit--dev_medium_curves
          - test--test_postake_medium_curves
          - test--test_postake_snarkless_medium_curves
          - test--test_postake_split_medium_curves